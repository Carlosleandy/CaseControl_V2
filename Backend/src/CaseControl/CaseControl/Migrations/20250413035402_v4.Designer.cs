// <auto-generated />
using System;
using CaseControl.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CaseControl.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250413035402_v4")]
    partial class v4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CaseControl.Domain.Entities.Access", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accesses");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Access_Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccessID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccessID");

                    b.HasIndex("RoleID");

                    b.ToTable("Access_Roles");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Binnacle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Binnacles");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Case", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AffectedAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AmountDetected")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountInvestigated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountLost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRecovered")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseStatusID")
                        .HasColumnType("int");

                    b.Property<int>("CaseTypeID")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCommunication")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfReceipt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceptionMediumID")
                        .HasColumnType("int");

                    b.Property<string>("Recipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserNameRegistered")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CaseStatusID");

                    b.HasIndex("CaseTypeID");

                    b.HasIndex("ReceptionMediumID");

                    b.HasIndex("UserID");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("userNameRegistered")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("UserID");

                    b.ToTable("CaseAssignments");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CaseStatuses");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseStatusChange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int>("CaseStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("userNameRegistered")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("CaseStatusID");

                    b.ToTable("CaseStatusChanges");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CaseTypes");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Evidence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvidenceClassificationID")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Hash")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SizeKB")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("EvidenceClassificationID");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.EvidenceClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EvidenceClassifications");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Fault", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FaultTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FaultTypeID");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.FaultLinked", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("FaultID")
                        .HasColumnType("int");

                    b.Property<int>("LinkedID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("FaultID");

                    b.HasIndex("LinkedID");

                    b.ToTable("FaultLinkeds");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.FaultType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FaultTypes");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Interview", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateInterview")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntervieweeTypeID")
                        .HasColumnType("int");

                    b.Property<int>("LinkedID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("IntervieweeTypeID");

                    b.HasIndex("LinkedID");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.IntervieweeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("IntervieweeTypes");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.LinkType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LinkTypes");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Linked", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("LinkTypeID");

                    b.ToTable("Linkeds");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.ReceptionMedium", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReceptionMedia");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Recommendation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecommendationStatusID")
                        .HasColumnType("int");

                    b.Property<int>("RecommendationTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitToWhichItIsAddressed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("RecommendationStatusID");

                    b.HasIndex("RecommendationTypeID");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RecommendationStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RecommendationStatuses");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RecommendationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RecommendationTypes");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RecoveryHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("AmountRecovery")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRecovery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("UserID");

                    b.ToTable("RecoveryHistories");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RelLinkedFault", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateFault")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaultID")
                        .HasColumnType("int");

                    b.Property<int>("LinkedID")
                        .HasColumnType("int");

                    b.Property<string>("UserNameRegistered")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FaultID");

                    b.HasIndex("LinkedID");

                    b.ToTable("RelLinkedFaults");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("UserLevelID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkingGroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserLevelID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("WorkingGroupID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.UserLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.WorkingGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("WorkingGroups");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.vwCostCenter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Center")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Full_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VwCostCenters");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.vwEmployee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Empresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Fecha_de_Ingreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Fecha_de_Nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gerencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ID_de_Puesto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre_Completo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Puesto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo_de_Empleado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("vwEmployees");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.vwOficinas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Localidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre_Oficina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oficina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oficina_Completa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oficina_Parsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo_Oficina")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VwOficinas");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Access_Role", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Access", "Access")
                        .WithMany("Access_Roles")
                        .HasForeignKey("AccessID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.Role", "Role")
                        .WithMany("Access_Roles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Access");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Binnacle", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("Binnacles")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.User", "User")
                        .WithMany("Binnacles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Case", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.CaseStatus", "CaseStatus")
                        .WithMany("Cases")
                        .HasForeignKey("CaseStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.CaseType", "CaseType")
                        .WithMany("Cases")
                        .HasForeignKey("CaseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.ReceptionMedium", "ReceptionMedium")
                        .WithMany("Cases")
                        .HasForeignKey("ReceptionMediumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.User", "User")
                        .WithMany("Cases")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseStatus");

                    b.Navigation("CaseType");

                    b.Navigation("ReceptionMedium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseAssignment", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("CaseAssignments")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.User", "User")
                        .WithMany("CaseAssignments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseStatusChange", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("CaseStatusChanges")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.CaseStatus", "CaseStatus")
                        .WithMany("CaseStatusChanges")
                        .HasForeignKey("CaseStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("CaseStatus");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Evidence", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("Evidences")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.EvidenceClassification", "EvidenceClassification")
                        .WithMany("Evidences")
                        .HasForeignKey("EvidenceClassificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("EvidenceClassification");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Fault", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.FaultType", "FaultType")
                        .WithMany("Faults")
                        .HasForeignKey("FaultTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaultType");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.FaultLinked", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("FaultLinkeds")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.Fault", "Fault")
                        .WithMany("FaultLinkeds")
                        .HasForeignKey("FaultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.Linked", "Linked")
                        .WithMany("FaultLinkeds")
                        .HasForeignKey("LinkedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Fault");

                    b.Navigation("Linked");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Interview", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("Interviews")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.IntervieweeType", "IntervieweeType")
                        .WithMany("Interviews")
                        .HasForeignKey("IntervieweeTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.Linked", "Linked")
                        .WithMany("Interviews")
                        .HasForeignKey("LinkedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("IntervieweeType");

                    b.Navigation("Linked");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Linked", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("Linkeds")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.LinkType", "LinkType")
                        .WithMany("Linkeds")
                        .HasForeignKey("LinkTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("LinkType");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Recommendation", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("Recommendations")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.RecommendationStatus", "RecommendationStatus")
                        .WithMany("Recommendations")
                        .HasForeignKey("RecommendationStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.RecommendationType", "RecommendationType")
                        .WithMany("Recommendations")
                        .HasForeignKey("RecommendationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.User", "User")
                        .WithMany("Recommendations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("RecommendationStatus");

                    b.Navigation("RecommendationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RecoveryHistory", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Case", "Case")
                        .WithMany("RecoveryHistories")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.User", "User")
                        .WithMany("RecoveryHistories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RelLinkedFault", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Fault", "Fault")
                        .WithMany()
                        .HasForeignKey("FaultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.Linked", "Linked")
                        .WithMany("RelUserFaults")
                        .HasForeignKey("LinkedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fault");

                    b.Navigation("Linked");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.User", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.UserLevel", "UserLevel")
                        .WithMany("Users")
                        .HasForeignKey("UserLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseControl.Domain.Entities.WorkingGroup", "WorkingGroup")
                        .WithMany("Users")
                        .HasForeignKey("WorkingGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLevel");

                    b.Navigation("WorkingGroup");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.UserLevel", b =>
                {
                    b.HasOne("CaseControl.Domain.Entities.Role", "Role")
                        .WithMany("UserLevels")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Access", b =>
                {
                    b.Navigation("Access_Roles");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Case", b =>
                {
                    b.Navigation("Binnacles");

                    b.Navigation("CaseAssignments");

                    b.Navigation("CaseStatusChanges");

                    b.Navigation("Evidences");

                    b.Navigation("FaultLinkeds");

                    b.Navigation("Interviews");

                    b.Navigation("Linkeds");

                    b.Navigation("Recommendations");

                    b.Navigation("RecoveryHistories");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseStatus", b =>
                {
                    b.Navigation("CaseStatusChanges");

                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.CaseType", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.EvidenceClassification", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Fault", b =>
                {
                    b.Navigation("FaultLinkeds");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.FaultType", b =>
                {
                    b.Navigation("Faults");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.IntervieweeType", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.LinkType", b =>
                {
                    b.Navigation("Linkeds");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Linked", b =>
                {
                    b.Navigation("FaultLinkeds");

                    b.Navigation("Interviews");

                    b.Navigation("RelUserFaults");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.ReceptionMedium", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RecommendationStatus", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.RecommendationType", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.Role", b =>
                {
                    b.Navigation("Access_Roles");

                    b.Navigation("UserLevels");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.User", b =>
                {
                    b.Navigation("Binnacles");

                    b.Navigation("CaseAssignments");

                    b.Navigation("Cases");

                    b.Navigation("Recommendations");

                    b.Navigation("RecoveryHistories");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.UserLevel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseControl.Domain.Entities.WorkingGroup", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
